const ffmpeg = require("fluent-ffmpeg");
const fs = require("fs");
const path = require("path");

// mixAudio Ìï®Ïàò: Ïò§ÎîîÏò§ ÎØπÏã± ÌõÑ Î∞îÎ°ú MP3Î°ú Î≥ÄÌôò
async function mixAudio(folderPath, outputPath) {
  return new Promise(async (resolve, reject) => {
    fs.readdir(folderPath, async (err, files) => {
      if (err) return reject(err);

      // .mp3 ÌååÏùº ÌïÑÌÑ∞ÎßÅ ÌõÑ ÏïåÌååÎ≤≥Ïàú Ï†ïÎ†¨
      const inputPaths = files
        .filter((file) => path.extname(file).toLowerCase() === ".mp3")
        .map((file) => path.join(folderPath, file))
        .sort((a, b) => path.basename(a).localeCompare(path.basename(b), "ko"));

      if (inputPaths.length === 0) {
        return reject(
          new Error("No .wav files found in the specified folder.")
        );
      }

      // ÌååÏùº Ïù¥Î¶Ñ Í∞ÄÏ†∏Ïò§Í∏∞
      const fileNames = inputPaths.map((file) => path.basename(file, ".mp3"));

      // ÎØπÏã±Îêú ÌååÏùº Ïù¥Î¶Ñ ÏÉùÏÑ± (Ïòà: "Í∏∞ÏóÖ+ÏÑ†Ï§Ä+Ìù¨Ï∞¨.mp3")
      const outputFileName = `${fileNames.join("+")}.mp3`;
      const outputFilePath = path.join(outputPath, outputFileName);

      
      console.log(`üîπ Mixing files: ${inputPaths.join(", ")}`);
      console.log(`üîπ Output file: ${outputFilePath}`);

      try {
        // Î≥ëÎ†¨ ÎØπÏã± ÏãúÏûë
        const command = ffmpeg();
        inputPaths.forEach((file) => command.input(file));

        command
          .complexFilter([
            {
              filter: "amix",
              options: {
                inputs: inputPaths.length, // ÏûÖÎ†• Ïò§ÎîîÏò§ Í∞úÏàò ÏßÄÏ†ï
                duration: "longest", // Í∞ÄÏû• Í∏¥ Ïò§ÎîîÏò§ Í∏∞Ï§ÄÏúºÎ°ú ÎØπÏã±
                dropout_transition: 2, // ÏßßÏùÄ ÏÜåÎ¶¨Ïùò ÎÅäÍπÄ Î∞©ÏßÄ
              },
            },
          ])
          .audioCodec("libmp3lame") // MP3 Î≥ÄÌôòÏùÑ ÏúÑÌïú Ï†ÅÏ†àÌïú ÏΩîÎç± ÏÑ§Ï†ï
          .audioBitrate("192k") // MP3 ÌíàÏßà ÏÑ§Ï†ï (128k ~ 320k Í∞ÄÎä•)
          .format("mp3") // MP3 Ìè¨Îß∑ÏúºÎ°ú Ï†ÄÏû•
          .on("end", () => {
            console.log(`‚úÖ Mixing finished. Output file: ${outputFilePath}`);
            resolve(outputFilePath);
          })
          .on("error", (err) => {
            console.error("‚ùå Error during mixing:", err);
            reject(err);
          })
          .save(outputFilePath);
      } catch (error) {
        reject(error);
      }
    });
  });
}

module.exports = { mixAudio };
