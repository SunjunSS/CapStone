const loginHandler = require("./LoginHandler.js");
const nodeService = require("../services/nodeService/nodeService"); // ‚úÖ nodeService Ï∂îÍ∞Ä
const audioHandler = require("./audioHandler.js")

const rooms = {};
const roomAudioBuffers = {};
const recordingStatus = {};
const socketSessions = require("./socketSessions");
const roomNodes = {}; // ÎÖ∏Îìú Ï†ÄÏû• Í∞ùÏ≤¥ Ï∂îÍ∞Ä (ÎàÑÎùΩÎêòÏñ¥ ÏûàÏóàÏùå)
const roomNicknames = {}; // Î∞©Î≥Ñ ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ Ï†ÄÏû• Í∞ùÏ≤¥ Ï∂îÍ∞Ä
const roomTranscripts = {};




module.exports = (io) => {
  io.on("connection", (socket) => {
    console.log("üü¢ ÏÇ¨Ïö©Ïûê Ïó∞Í≤∞Îê®:", socket.id);

    let nowRoomId = null;
    // Î°úÍ∑∏Ïù∏ Ìï∏Îì§Îü¨ Ïã§Ìñâ
    loginHandler(socket);

    //  RTC Ïò§ÎîîÏò§ Í¥ÄÎ¶¨ Ìï∏Îì§Îü¨ Ïã§Ìñâ
    // audioHandler(socket);
    const { SpeechClient } = require("@google-cloud/speech");
    process.env.GOOGLE_APPLICATION_CREDENTIALS =
      "../google_key/planar-lacing-454709-b6-06cea798e131.json";

    // Ïã§ÏãúÍ∞Ñ googleSTT Ïù¥Î≤§Ìä∏ ÏãúÏûë
    const client = new SpeechClient();
    const encoding = "WEBM_OPUS";
    const sampleRateHertz = 16000;
    const languageCode = "ko-KR";

    const request = {
      config: {
        encoding: encoding,
        sampleRateHertz: sampleRateHertz,
        languageCode: languageCode,
        enableAutomaticPunctuation: true,
      },
      single_utterance: false,
      interimResults: true, // Ï§ëÍ∞Ñ Í≤∞Í≥º Î∞òÌôò
    };

    // Keep-Alive Ï≤òÎ¶¨: ÏùºÏ†ï Í∞ÑÍ≤©ÏúºÎ°ú Îπà Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
    const keepAliveInterval = setInterval(() => {
      if (!recognizeStream.destroyed) {
        recognizeStream.write(Buffer.from([])); // Îπà Î≤ÑÌçº Ï†ÑÏÜ°
      }
    }, 5000); // 5Ï¥àÎßàÎã§ Ï†ÑÏÜ°

    // Google STT Ïä§Ìä∏Î¶º ÏÉùÏÑ±
    const recognizeStream = client
      .streamingRecognize(request)
      .on("error", console.error)
      .on("data", (data) => {
        const transcript = data.results[0]?.alternatives[0]?.transcript;

        if (transcript) {
          console.log(`STT: ${transcript}`);

          // Ìï¥Îãπ Î∞©Ïóê ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
          roomTranscripts[nowRoomId].transcripts.push(transcript);
          roomTranscripts[nowRoomId].count += 1;

          // Ìï¥Îãπ roomÏùò ÌÖçÏä§Ìä∏Í∞Ä Î™®Îëê Î™®ÏòÄÏùÑ Í≤ΩÏö∞
          if (roomTranscripts[nowRoomId].count === rooms[nowRoomId].length) {
            // AIÌïúÌÖå Î≥¥ÎÇ¥Í∏∞
            console.log(`${nowRoomId}Ïùò 10Ï¥àÎßàÎã§ AIÎ∂ÑÏÑù ÏãúÌñâ`)
            //processRoomData(nowRoomId);
          }
        }
      });

    let audioBufferQueue = [];

    const sendAudioDataInterval = setInterval(() => {
      if (audioBufferQueue.length > 0) {
        const concatenatedBuffer = Buffer.concat(audioBufferQueue);
        if (!recognizeStream.destroyed) {
          recognizeStream.write(concatenatedBuffer); // 10Ï¥àÎßàÎã§ Îç∞Ïù¥ÌÑ∞Î•º Î≥¥ÎÇ¥Í∏∞
          console.log("STTÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°:", concatenatedBuffer.length);
        }
        audioBufferQueue = []; // Ï†ÑÏÜ° ÌõÑ ÌÅê Ï¥àÍ∏∞Ìôî
      }
    }, 10000); // 10Ï¥àÎßàÎã§ Ï†ÑÏÜ°

    // ÏùåÏÑ± Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Ï≤òÎ¶¨
    socket.on("streamingData", (audioBuffer) => {
      if (!audioBuffer || !(audioBuffer instanceof Uint8Array)) {
        console.error("‚ùå Received invalid audioBuffer:", audioBuffer);
        return;
      }

      const buffer = Buffer.from(audioBuffer);
      audioBufferQueue.push(buffer);
    });

    

    // Î∞© Ï∞∏Í∞Ä Ï≤òÎ¶¨
    socket.on("join-room", ({ roomId, userId, nickname }) => {
      socket.join(roomId);
      nowRoomId = roomId

      const userSocketId = socketSessions[userId]; // Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÏùò socket.id Í∞ÄÏ†∏Ïò§Í∏∞
      if (userSocketId) {
        // Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÏùò socket.idÎ°ú Î∞© Ï∞∏Ïó¨
        socket.join(roomId);
        console.log(`‚úÖ ${userId} ÎãòÏù¥ ${roomId} Î∞©Ïóê ÏûÖÏû•`);
      }

      // Î∞©Ïù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
      if (!rooms[roomId]) {
        rooms[roomId] = {};

       
      }
      rooms[roomId][socket.id] = userId;

      if(!roomTranscripts[roomId]) {
        // ÏùåÏÑ± ÌÖçÏä§Ìä∏Î•º Ï†ÄÏû•
        roomTranscripts[roomId] = { transcripts: [], count: 0 };
      }

      // ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ Ï†ÄÏû•
      if (!roomNicknames[roomId]) {
        roomNicknames[roomId] = {};
      }
      if (nickname) {
        roomNicknames[roomId][userId] = nickname;
        console.log(`üìù ÎãâÎÑ§ÏûÑ Îì±Î°ù: ${userId} => ${nickname}`);
      }

      // Î∞©Ïóê ÏûàÎäî Ï∞∏Í∞ÄÏûêÎì§Ïùò Ïò§ÎîîÏò§ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
      if (!roomAudioBuffers[roomId]) {
        roomAudioBuffers[roomId] = [];
      }

      // ÏÉàÎ°úÏö¥ Ï∞∏Í∞ÄÏûêÏóêÍ≤å Í∏∞Ï°¥ Ï∞∏Í∞ÄÏûê Î™©Î°ùÍ≥º ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥Î•º Ï†ÑÏÜ°
      socket.emit("existing-participants", {
        participants: Object.values(rooms[roomId]),
        nicknames: roomNicknames[roomId],
      });

      // Í∏∞Ï°¥ Ï∞∏Í∞ÄÏûêÎì§ÏóêÍ≤å ÏÉàÎ°úÏö¥ Ï∞∏Í∞ÄÏûêÎ•º ÏïåÎ¶º
      socket.to(roomId).emit("new-participant", {
        participantId: userId,
        nickname: nickname,
      });

      // Î∞© Ï∞∏Í∞ÄÏûê Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
      io.to(roomId).emit("room-update", {
        participants: Object.values(rooms[roomId]),
      });

      // Î∞© Ï†ÑÏ≤¥Ïóê ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ ÎèôÍ∏∞Ìôî
      io.to(roomId).emit("sync-nicknames", roomNicknames[roomId]);

      console.log(`üì¢ ${userId} ÎãòÏù¥ ${roomId} Î∞©Ïóê ÏûÖÏû•`);
      console.log(`Room ${roomId} participants:`, rooms[roomId]);
    });

    // ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨ Ìï∏Îì§Îü¨ Ï∂îÍ∞Ä
    socket.on("update-nickname", ({ roomId, userId, nickname }) => {
      if (!roomNicknames[roomId]) {
        roomNicknames[roomId] = {};
      }

      // ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
      roomNicknames[roomId][userId] = nickname;
      console.log(`üîÑ ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏: ${userId} => ${nickname}`);

      // Î∞© Ï†ÑÏ≤¥Ïóê ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ ÎèôÍ∏∞Ìôî
      io.to(roomId).emit("sync-nicknames", roomNicknames[roomId]);
    });

    // ÎÖπÏùå ÏãúÏûë ÏÉÅÌÉú ÏàòÏã†
    socket.on("start-recording", (roomId) => {
      console.log(`started recording in room ${roomId}`);
      recordingStatus[roomId] = true;
      io.to(roomId).emit("sync-recording", true);
      console.log(`üì° sync-recording Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ° - Room ID: ${roomId}`);
      roomAudioBuffers[roomId] = [];

      

    });

    // ÎÖπÏùå Ï§ëÏßÄ Ï≤òÎ¶¨
    socket.on("stop-recording", (roomId) => {
      console.log(`Recording stopped in room ${roomId}`);

      // googleSTTÎèÑ Ï¢ÖÎ£å
      console.log("üö™ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ìï¥Ï†ú, STT Ïä§Ìä∏Î¶º Ï¢ÖÎ£å");
      // clearInterval(keepAliveInterval); // Keep-Alive Ï§ëÏßÄ
      // clearInterval(sendAudioDataInterval);
      // recognizeStream.end();

      recordingStatus[roomId] = false;
      io.to(roomId).emit("sync-recording", false);
    });

    // ÎßàÏö∞Ïä§ Ïù¥Îèô Ï†ïÎ≥¥ Ï†ÑÎã¨
    socket.on("mouse-move", ({ roomId, userId, x, y }) => {
      if (typeof x === "undefined" || typeof y === "undefined") {
        console.error(`üö® x ÎòêÎäî y Í∞íÏù¥ ÏóÜÏäµÎãàÎã§! userId: ${userId}`);
        return;
      }

      socket.to(roomId).emit("update-mouse", { userId, x, y });
    });

    // ‚úÖ ÎÖ∏Îìú Ï∂îÍ∞Ä (Î∞©Ïùò Î™®Îì† Ï∞∏Í∞ÄÏûêÏóêÍ≤å Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Ï†ÑÏÜ°)
    socket.on("add-node", ({ roomId, node }) => {
      if (!roomNodes[roomId]) roomNodes[roomId] = [];

      // üîπ Í∞ôÏùÄ ÎÖ∏ÎìúÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
      const exists = roomNodes[roomId].some(
        (existingNode) => existingNode.id === node.id
      );
      if (!exists) {
        roomNodes[roomId].push(node);

        console.log("üü¢ ÏÉàÎ°úÏö¥ ÎÖ∏Îìú Ï∂îÍ∞ÄÎê®:", node);
        io.to(roomId).emit("nodeAdded", node); // ‚úÖ Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ ÏûàÏùÑ ÎïåÎßå Ï†ÑÏÜ°
      }
    });

    // ‚úÖ ÎÖ∏Îìú ÏÇ≠Ï†ú (Î∞©Ïùò Î™®Îì† Ï∞∏Í∞ÄÏûêÏóêÍ≤å Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Ï†ÑÏÜ°)
    socket.on("delete-node", ({ roomId, nodeId }) => {
      if (roomNodes[roomId]) {
        const beforeDeleteCount = roomNodes[roomId].length;
        roomNodes[roomId] = roomNodes[roomId].filter(
          (node) => node.id !== nodeId
        );

        // üîπ ÏÇ≠Ï†úÎêú Í≤ΩÏö∞ÏóêÎßå Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°
        if (roomNodes[roomId].length !== beforeDeleteCount) {
          console.log("üóëÔ∏è ÎÖ∏Îìú ÏÇ≠Ï†úÎê®:", nodeId);
          io.to(roomId).emit("nodeDeleted", nodeId);
        }
      }
    });

    // ‚úÖ ÎÖ∏Îìú ÏàòÏ†ï (Î∞©Ïùò Î™®Îì† Ï∞∏Í∞ÄÏûêÏóêÍ≤å Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Ï†ÑÏÜ°)
    socket.on("update-node", ({ roomId, updatedNode }) => {
      if (roomNodes[roomId]) {
        const index = roomNodes[roomId].findIndex(
          (node) => node.id === updatedNode.id
        );
        if (
          index !== -1 &&
          JSON.stringify(roomNodes[roomId][index]) !==
            JSON.stringify(updatedNode)
        ) {
          roomNodes[roomId][index] = updatedNode;

          console.log("‚úèÔ∏è ÎÖ∏Îìú ÏàòÏ†ïÎê®:", updatedNode);
          io.to(roomId).emit("nodeUpdated", updatedNode);
        }
      }
    });

    // ‚úÖ ÎÖ∏Îìú Ïù¥Îèô Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
    socket.on(
      "move-node",
      async ({ movedNodeId, newParentId, roomId, project_id }) => {
        console.log("üì° [Socket] move-node Ïù¥Î≤§Ìä∏ ÏàòÏã†:", {
          movedNodeId,
          newParentId,
          roomId,
          project_id,
        });

        try {
          const updatedNode = await nodeService.moveNode(
            movedNodeId,
            newParentId,
            project_id
          );

          console.log("üì° [Socket] Ïù¥ÎèôÎêú ÎÖ∏Îìú Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏:", updatedNode);

          // ‚úÖ Î∞©(roomId)Ïùò Î™®Îì† Ï∞∏Í∞ÄÏûêÏóêÍ≤å Ïù¥ÎèôÎêú ÎÖ∏Îìú Ï†ïÎ≥¥Î•º Ï†ÑÏÜ°
          io.to(roomId).emit("nodeMoved", updatedNode);
        } catch (error) {
          console.error("‚ùå [Socket] ÎÖ∏Îìú Ïù¥Îèô Ï§ë Ïò§Î•ò Î∞úÏÉù:", error.message);
        }
      }
    );

    // WebRTC ÏãúÍ∑∏ÎÑêÎßÅ Ï≤òÎ¶¨
    socket.on("signal", ({ targetId, signal }) => {
      try {
        io.to(targetId).emit("signal", {
          senderId: socket.id,
          signal: signal,
        });
      } catch (error) {
        console.error(`‚ùå Signal processing error: ${error.message}`);
        socket.emit("signal-error", {
          error: `Signal processing failed: ${error.message}`,
          targetId,
          signalType: signal.type || "ICE candidate",
        });
      }
    });

    // Î∞© ÎÇòÍ∞ÄÍ∏∞
    socket.on("leave-room", ({ roomId, userId }) => {
      if (rooms[roomId]) {
        delete rooms[roomId][socket.id];

        // ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ ÏÇ≠Ï†ú
        if (roomNicknames[roomId] && roomNicknames[roomId][userId]) {
          delete roomNicknames[roomId][userId];
        }

        io.to(roomId).emit("user-disconnected", userId);

        // ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
        io.to(roomId).emit("sync-nicknames", roomNicknames[roomId]);

        console.log(`‚ùå ${userId} ÎãòÏù¥ ${roomId} Î∞©ÏóêÏÑú ÎÇòÍ∞ê`);
      }
    });

    // Ïó∞Í≤∞ Ìï¥Ï†ú Ï≤òÎ¶¨
    socket.on("disconnect", () => {
      console.log("üî¥ ÏÇ¨Ïö©Ïûê Ïó∞Í≤∞ Ï¢ÖÎ£å:", socket.id);

      for (const roomId in rooms) {
        if (rooms[roomId][socket.id]) {
          const userId = rooms[roomId][socket.id];
          delete rooms[roomId][socket.id];

          // ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ ÏÇ≠Ï†ú
          if (roomNicknames[roomId] && roomNicknames[roomId][userId]) {
            delete roomNicknames[roomId][userId];
          }

          io.to(roomId).emit("user-disconnected", userId);

          // ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
          io.to(roomId).emit("sync-nicknames", roomNicknames[roomId]);

          // Î∞©Ïù¥ ÎπÑÏóàÏúºÎ©¥ ÏÇ≠Ï†ú
          if (Object.keys(rooms[roomId]).length === 0) {
            delete rooms[roomId];
            delete roomAudioBuffers[roomId];
            delete roomNicknames[roomId]; // ÎãâÎÑ§ÏûÑ Ï†ïÎ≥¥ÎèÑ ÏÇ≠Ï†ú
            console.log(`Room ${roomId} deleted`);
          }
        }
      }
    });
  });
};
